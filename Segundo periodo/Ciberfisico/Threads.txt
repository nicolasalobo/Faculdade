EXERCÍCIO 1: Paralelismo e Serialização de Threads
1.1. O programa principal não aguarda a finalização das threads. A medição de tempo termina logo após o lançamento das threads, registrando apenas o tempo de inicialização, que é muito baixo, e não o tempo total de execução das tarefas em paralelo.

1.2. A execução se tornaria serial. Chamar t.join() dentro do laço de repetição faria com que o programa principal iniciasse uma thread e esperasse por sua conclusão antes de iniciar a próxima, eliminando o paralelismo.

EXERCÍCIO 2: Compartilhamento de Variáveis em Threads e Processos
2.1. Sem a declaração global count, cada thread cria e modifica sua própria variável local count. A variável global no programa principal permanece inalterada em seu valor inicial, pois as threads não a estão acessando.

2.2. O contador permanece em zero porque processos possuem espaços de memória separados. Cada processo filho modifica sua própria cópia da variável count, sem afetar a variável original do processo pai. Para o compartilhamento, seriam necessários mecanismos de Comunicação entre Processos (IPC), como a Memória Compartilhada (Value).

EXERCÍCIO 3: Condição de Corrida e Sincronização
3.1. O resultado incorreto é causado por uma condição de corrida (race condition). Várias threads leem o valor da variável compartilhada count antes que ela seja atualizada. Elas então calculam o novo valor com base no mesmo dado antigo, e as operações de escrita subsequentes se sobrepõem, resultando na perda de incrementos.

3.2. Sim, o uso do Lock torna o programa mais lento. O Lock serializa o acesso à região crítica do código, permitindo que apenas uma thread por vez modifique a variável compartilhada. As outras threads são forçadas a esperar, o que reduz o paralelismo, mas garante a precisão do resultado final.

Exercício 1: Medindo o Tempo de Execução
Este é o código do Exemplo 1 modificado para medir o tempo de execução. Note que, sem o join(), o tempo impresso será muito baixo, pois o programa principal termina antes das threads.

import threading
import time
import random

def minhathread(n):
    """Função que simula uma tarefa de uma thread."""
    t = random.randint(1, 3)
    time.sleep(t)
    print(f"Thread {n} acordou depois de {t}s")

inicio = time.time()

for i in range(10):
    threading.Thread(target=minhathread, args=(i,)).start() #

print("Threads lançadas, programa principal terminando...")

fim = time.time()
print(f"Tempo de execução (incorreto): {fim - inicio:.4f} segundos\n")

Esta é a versão corrigida, baseada no Exemplo 2, que usa join() para garantir que o programa principal espere todas as threads terminarem antes de calcular o tempo final.

import threading
import time
import random

def minhathread(n):
    """Função que simula uma tarefa de uma thread."""
    t = random.randint(1, 3)
    time.sleep(t)
    print(f"Thread {n} acordou depois de {t}s")

inicio = time.time()

threads = []
for i in range(10):
    t = threading.Thread(target=minhathread, args=(i,)) #
    threads.append(t) #
    t.start() #

print("Threads lançadas. Aguardando a finalização de todas...")

for x in threads:
    x.join() #

print("\nTodas as threads terminaram!")

fim = time.time()
print(f"Tempo de execução (correto): {fim - inicio:.4f} segundos")

Exercício 3: Criando uma Condição de Corrida
Este código altera o Exemplo 4 para introduzir uma condição de corrida de forma explícita, como pedido no item "a" do exercício. O resultado final de count será inconsistentemente menor que 10.

import threading
import time
import random

count = 0

def minhathread(n):
    """Função que acessa um recurso compartilhado (count) de forma insegura."""
    global count #
    
    t = random.randint(1, 3)
    time.sleep(t)
    print(f"Thread {n} acordou depois de {t}s")
    
    mycount = count # Lê o valor global
    time.sleep(0.01) # Simula uma operação que libera o processador
    count = mycount + 1 # Escreve o valor incrementado

threads = []
for i in range(10):
    t = threading.Thread(target=minhathread, args=(i,)) #
    threads.append(t)
    t.start()

for x in threads:
    x.join()

print(f"\nResultado final (incorreto) de 'count': {count}")

Esta é a versão final corrigida com um threading.Lock para proteger a região crítica, garantindo que o resultado de count seja sempre 10.

import threading
import time
import random

count = 0
lock = threading.Lock() # Cria um objeto Lock global

def minhathread(n):
    """Função que acessa um recurso compartilhado (count) de forma segura."""
    global count #
    
    t = random.randint(1, 3)
    time.sleep(t)
    print(f"Thread {n} acordou depois de {t}s")
    
    lock.acquire() # Adquire o lock antes de acessar o recurso
    mycount = count
    time.sleep(0.01)
    count = mycount + 1
    lock.release() # Libera o lock após a modificação

threads = []
for i in range(10):
    t = threading.Thread(target=minhathread, args=(i,)) #
    threads.append(t)
    t.start()

for x in threads:
    x.join()

print(f"\nResultado final (correto) de 'count': {count}")