AULA DIA 08/05/2025
----------------- Código aula 1 -----------------
-- Criar um banco de dados
CREATE DATABASE db_puc;
USE db_puc;

-- Criar tabelas
CREATE TABLE tb_aluno (
    aluno_id INT PRIMARY KEY AUTO_INCREMENT,
    aluno_nome VARCHAR(50)
);

CREATE TABLE tb_curso (
    curso_id INT PRIMARY KEY AUTO_INCREMENT,
    curso_nome VARCHAR(50)
);

CREATE TABLE tb_disciplina (
    disc_id INT PRIMARY KEY AUTO_INCREMENT,
    disc_nome VARCHAR(50)
);

-- Criar tabela de relacionamento entre aluno e curso
CREATE TABLE tb_curso_aluno (
    ca_id INT PRIMARY KEY AUTO_INCREMENT,
    ca_id_aluno INT,
    ca_id_curso INT,
    ca_data_matricula DATE,
    ca_data_colacao DATE,
    ca_data_abandono DATE,
    -- Estudar o que é linhas abaixo
    -- Chave estrangeira, relaciona o ca_id_aluno com o aluno_id da tabela tb_aluno, ou seja, acabam por ser a mesma coisa, forçando a integridade referencial
    FOREIGN KEY (ca_id_aluno) REFERENCES tb_aluno(aluno_id),
    FOREIGN KEY (ca_id_curso) REFERENCES tb_curso(curso_id)
);

CREATE TABLE tb_matricula (
    mat_id INT PRIMARY KEY AUTO_INCREMENT,
    mat_id_ca INT,
    mat_id_disc INT,
    mat_data_matricula DATE,
    mat_nota FLOAT
    mat_data_trancamento DATE,
    mat_situacao ENUM('APV', 'REP'),
    FOREIGN KEY (mat_id_ca) REFERENCES tb_curso_aluno(ca_id),
    FOREIGN KEY (mat_id_disc) REFERENCES tb_disciplina(disc_id)
);

INSERT INTO tb_aluno (aluno_nome) VALUES ('Aluno 1');
INSERT INTO tb_aluno (aluno_nome) VALUES ('Aluno 2');
INSERT INTO tb_aluno (aluno_nome) VALUES ('Aluno 3');

INSERT INTO tb_curso (curso_nome) VALUES ('Curso 1');
INSERT INTO tb_curso (curso_nome) VALUES ('Curso 2');
INSERT INTO tb_curso (curso_nome) VALUES ('Curso 3'); 

INSERT INTO tb_disciplina (disc_nome) VALUES ('Disciplina 1');
INSERT INTO tb_disciplina (disc_nome) VALUES ('Disciplina 2');
INSERT INTO tb_disciplina (disc_nome) VALUES ('Disciplina 3');

-- SELECT * FROM tb_aluno;
-- tb_aluno
-- Mostra que o aluno 1 tem o id 1, aluno 2 tem o id 2 e assim por diante

-- SELECT * FROM tb_curso;
-- tb_curso
-- Mostra que o curso 1 tem o id 1, curso 2 tem o id 2 e assim por diante

INSERT INTO tb_curso_aluno (ca_id_aluno, ca_id_curso, ca_data_matricula) VALUES (1, 1, '2025-05-08');
INSERT INTO tb_curso_aluno (ca_id_aluno, ca_id_curso, ca_data_matricula) VALUES (2, 2, '2025-05-08');
INSERT INTO tb_curso_aluno (ca_id_aluno, ca_id_curso, ca_data_matricula) VALUES (3, 3, '2025-05-08');

-- SELECT * FROM tb_curso_aluno;
-- tb_curso_aluno
-- Mostra que o aluno 1 está no curso 1, aluno 2 no curso 2 e assim por diante

-- Matricular alunos nas disciplinas, cada aluno em 3 disciplinas, o primeiro número é o aluno, o segundo número é a disciplina
INSERT INTO tb_matricula (mat_id_ca, mat_id_disc, mat_data_matricula) VALUES (1, 1 , '2025-05-08');
INSERT INTO tb_matricula (mat_id_ca, mat_id_disc, mat_data_matricula) VALUES (1, 2 , '2025-05-08');
INSERT INTO tb_matricula (mat_id_ca, mat_id_disc, mat_data_matricula) VALUES (1, 3 , '2025-05-08');

INSERT INTO tb_matricula (mat_id_ca, mat_id_disc, mat_data_matricula) VALUES (2, 1 , '2025-05-08');
INSERT INTO tb_matricula (mat_id_ca, mat_id_disc, mat_data_matricula) VALUES (2, 2 , '2025-05-08');
INSERT INTO tb_matricula (mat_id_ca, mat_id_disc, mat_data_matricula) VALUES (2, 3 , '2025-05-08');

INSERT INTO tb_matricula (mat_id_ca, mat_id_disc, mat_data_matricula) VALUES (3, 1 , '2025-05-08');
INSERT INTO tb_matricula (mat_id_ca, mat_id_disc, mat_data_matricula) VALUES (3, 2 , '2025-05-08');
INSERT INTO tb_matricula (mat_id_ca, mat_id_disc, mat_data_matricula) VALUES (3, 3 , '2025-05-08');

-- SELECT * FROM tb_aluno;
-- SELECT * FROM tb_curso;
-- SELECT * FROM tb_disciplina;
-- SELECT * FROM tb_curso_aluno;
-- SELECT * FROM tb_matricula;
-- Checagem para ver se os dados foram corretamente inseridos, se as tableas estão populadas

-- Junção das Queries
-- SELECT *
-- FROM tb_curso_aluno
-- LEFT JOIN tb_aluno ON aluno_id = ca_id_aluno
-- LEFT JOIN tb_curso ON curso_id = ca_id_curso;

-- Mais ajeitado
-- SELECT aluno_id, curso_id, aluno_nome, curso_nome, ca_data_matricula, ca_data_colacao, ca_data_abandono
-- FROM tb_curso_aluno
-- LEFT JOIN tb_aluno ON aluno_id = ca_id_aluno
-- LEFT JOIN tb_curso ON curso_id = ca_id_curso;

-- Criar uma view, para visualizar os dados de forma mais simples, fará o mesmo SELECT que o anterior, mas de forma mais simples
CREATE VIEW vw_matricula_curso AS
SELECT aluno_id, curso_id, aluno_nome, curso_nome, ca_data_matricula, ca_data_colacao, ca_data_abandono
FROM tb_curso_aluno
LEFT JOIN tb_aluno ON aluno_id = ca_id_aluno
LEFT JOIN tb_curso ON curso_id = ca_id_curso;
-- SELECT * FROM vw_matricula_curso;
-- Teste da view criada, para ver se os dados estão corretos

-- SELECT mat_id, ca_id, aluno_id, curso_id, disc_id, curso_nome, aluno_nome, disc_nome, mat_situacao, mat_nota, mat_data_matricula, mat_data_trancamento
-- FROM tb_matricula;
-- LEFT JOIN tb_curso_aluno ON ca_id = mat_id_ca
-- LEFT JOIN tb_disciplina ON disc_id = mat_id_disc
-- LEFT JOIN tb_aluno ON aluno_id = ca_id_aluno
-- LEFT JOIN tb_curso ON curso_id = ca_id_curso;

-- Criar uma view, para visualizar os dados de forma mais simples, fará o mesmo SELECT que o anterior, mas de forma mais simples
CREATE VIEW vw_historico_realizado AS
SELECT mat_id, ca_id, aluno_id, curso_id, disc_id, curso_nome, aluno_nome, disc_nome, mat_situacao, mat_nota, mat_data_matricula, mat_data_trancamento
FROM tb_matricula
LEFT JOIN tb_curso_aluno ON ca_id = mat_id_ca
LEFT JOIN tb_disciplina ON disc_id = mat_id_disc
LEFT JOIN tb_aluno ON aluno_id = ca_id_aluno
LEFT JOIN tb_curso ON curso_id = ca_id_curso;
-- SELECT * FROM vw_historico_realizado;
-- Teste da view criada, para ver se os dados estão corretos

-- Quero saber quantas matriculas cada aluno tem
-- SELECT aluno_nome, COUNT(mat_id) AS num_disciplinas
-- FROM vw_historico_realizado
-- GROUP BY aluno_nome;

-- Quero quantas matriculas tem por curso
-- SELECT curso_nome, COUNT(mat_id) AS num_disciplinas
-- FROM vw_historico_realizado
-- GROUP BY curso_nome;

-- SELECT * FROM vw_matricula_curso;

-- SELECT curso_nome, COUNT(aluno_id) AS num_alunos_matriculados
-- FROM vw_matricula_curso
-- GROUP BY curso_nome;